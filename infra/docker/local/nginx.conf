user  nginx;
worker_processes  auto;

pid /var/run/nginx.pid;
error_log stderr;
events {
}

http {
	# The mime type definitions included with nginx are very incomplete, so
	# we use a list of mime types from the mailcap package, which is also
	# used by most other Linux distributions by default.
	include       /etc/nginx/mime.types;
	# When recommendedOptimisation is disabled nginx fails to start because the mailmap mime.types database
	# contains 1026 enries and the default is only 1024. Setting to a higher number to remove the need to
	# overwrite it because nginx does not allow duplicated settings.
	types_hash_max_size 4096;
	
	default_type application/octet-stream;
	# optimisation
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	# Keep in sync with https://ssl-config.mozilla.org/#server=nginx&config=intermediate
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	# Breaks forward secrecy: https://github.com/mozilla/server-side-tls/issues/135
	ssl_session_tickets off;
	# We don't enable insecure ciphers by default, so this allows
	# clients to pick the most performant, per https://github.com/mozilla/server-side-tls/issues/260
	ssl_prefer_server_ciphers off;
	# OCSP stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	gzip on;
	gzip_proxied any;
	gzip_comp_level 5;
	gzip_types
	application/atom+xml
	application/javascript
	application/json
	application/xml
	application/xml+rss
	image/svg+xml
	text/css
	text/javascript
	text/plain
	text/xml;
	gzip_vary on;
	# $connection_upgrade is used for websocket proxying
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	client_max_body_size 2G;
	server_tokens off;
	log_format logfmt 'time="$time_local" client=$remote_addr '
	'method=$request_method url="$request_uri" '
	'request_length=$request_length '
	'status=$status bytes_sent=$bytes_sent '
	'body_bytes_sent=$body_bytes_sent '
	'referer=$http_referer '
	'user_agent="$http_user_agent" '
	'upstream_addr=$upstream_addr '
	'upstream_status=$upstream_status '
	'request_time=$request_time '
	'upstream_response_time=$upstream_response_time '
	'upstream_connect_time=$upstream_connect_time '
	'upstream_header_time=$upstream_header_time';

	server {
		listen 0.0.0.0:80 default_server;
		server_name thalia.nu;
		location / {
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_set_header        X-Forwarded-Host $host;
            proxy_set_header        X-Forwarded-Server $host;
			proxy_pass http://concrexit:8000;
		}
		location /.well-known/change-password {
			return 301 http://$host/password_change/;
		}
		location /media/public/ {
			alias /media/public/;
		}
		location /media/sendfile/ {
			alias /media/;
			internal;
		}
		location /static/ {
			alias /static/;
		}

		access_log /dev/stdout logfmt;
		# X-Frame-Options tells the browser whether you want to allow your site to be framed or not.
		# By preventing a browser from framing your site you can defend against attacks like clickjacking.
		add_header X-Frame-Options SAMEORIGIN;
		# X-Content-Type-Options stops a browser from trying to MIME-sniff the content type and forces it to stick with the declared content-type.
		add_header X-Content-Type-Options nosniff;
		# X-XSS-Protection sets the configuration for the cross-site scripting filters built into most browsers.
		add_header X-XSS-Protection "1; mode=block";
		# HTTP Strict Transport Security is an excellent feature to support on your site and strengthens your implementation of TLS by getting the User Agent to enforce the use of HTTPS.
		add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
		# Feature Policy is a new header that allows a site to control which features and APIs can be used in the browser.
		add_header Feature-Policy "camera 'none'; vr 'none'; camera 'none'; accelerometer 'none'; gyroscope 'none'";
		# Referrer Policy is a new header that allows a site to control how much information the browser includes with navigations away from a document and should be set by all sites.
		add_header Referrer-Policy strict-origin;
		# The Expect-CT header allows sites to opt in to reporting and/or enforcement of Certificate Transparency requirements,
		# which prevents the use of misissued certificates for that site from going unnoticed.
		# enforce not added for now
		add_header Expect-CT "max-age=604800";
	}
}
